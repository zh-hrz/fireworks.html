<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>一键烟花秀</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            position: relative;
            color: white;
        }
        
        .container {
            text-align: center;
            z-index: 10;
            padding: 30px;
            background: rgba(0, 0, 0, 0.6);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 0 30px rgba(255, 215, 0, 0.3);
            margin: 20px;
            max-width: 90%;
            animation: fadeIn 1.5s ease-out;
        }
        
        h1 {
            font-size: 3.5rem;
            margin-bottom: 20px;
            text-shadow: 0 0 15px rgba(255, 215, 0, 0.8);
            background: linear-gradient(to right, #ff9966, #ff5e62, #ff2e63, #ff0099);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            animation: glow 2s infinite alternate;
        }
        
        .subtitle {
            font-size: 1.3rem;
            margin-bottom: 30px;
            color: #e0e0e0;
        }
        
        .instructions {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin: 25px 0;
            font-size: 1.1rem;
            line-height: 1.6;
        }
        
        .highlight {
            color: #ffcc00;
            font-weight: bold;
        }
        
        .qr-container {
            background: white;
            padding: 15px;
            border-radius: 12px;
            margin: 20px auto;
            display: inline-block;
            box-shadow: 0 10px 20px rgba(0,0,0,0.3);
        }
        
        .qr-code {
            width: 180px;
            height: 180px;
            background: #f0f0f0;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 5rem;
            color: #333;
        }
        
        .features {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            margin: 30px 0;
        }
        
        .feature {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            width: 220px;
            transition: transform 0.3s, background 0.3s;
        }
        
        .feature:hover {
            transform: translateY(-10px);
            background: rgba(255, 255, 255, 0.15);
        }
        
        .feature h3 {
            color: #ffcc00;
            margin-bottom: 10px;
            font-size: 1.4rem;
        }
        
        .controls {
            margin-top: 20px;
        }
        
        button {
            background: linear-gradient(45deg, #ff9966, #ff5e62);
            border: none;
            padding: 14px 30px;
            font-size: 1.1rem;
            border-radius: 50px;
            color: white;
            cursor: pointer;
            margin: 10px;
            transition: transform 0.3s, box-shadow 0.3s;
            font-weight: bold;
            letter-spacing: 1px;
        }
        
        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(255, 94, 98, 0.7);
        }
        
        canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }
        
        footer {
            position: absolute;
            bottom: 20px;
            text-align: center;
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
            z-index: 10;
            width: 100%;
        }
        
        @keyframes glow {
            from {
                text-shadow: 0 0 5px rgba(255, 215, 0, 0.5);
            }
            to {
                text-shadow: 0 0 20px rgba(255, 215, 0, 0.9), 0 0 30px rgba(255, 94, 98, 0.8);
            }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            .subtitle {
                font-size: 1.1rem;
            }
            .feature {
                width: 100%;
            }
            .qr-code {
                width: 140px;
                height: 140px;
                font-size: 4rem;
            }
        }
    </style>
</head>
<body>
    <canvas id="fireworks"></canvas>
    
    <div class="container">
        <h1>🎆 一键烟花秀 🎇</h1>
        <p class="subtitle">点开即享绚丽烟花 | 点击页面任意位置触发更多烟花</p>
        
        <div class="instructions">
            <p>在手机上打开此页面，即可欣赏<span class="highlight">全自动烟花表演</span>！</p>
            <p>使用QQ扫描二维码，直接分享给好友：</p>
            
            <div class="qr-container">
                <div class="qr-code">
                    <i class="fas fa-qrcode"></i>
                </div>
            </div>
        </div>
        
        <div class="features">
            <div class="feature">
                <h3><i class="fas fa-palette"></i> 多彩烟花</h3>
                <p>随机生成不同颜色的绚丽烟花效果</p>
            </div>
            <div class="feature">
                <h3><i class="fas fa-mobile-alt"></i> 手机适配</h3>
                <p>完美适配各种手机屏幕尺寸</p>
            </div>
            <div class="feature">
                <h3><i class="fas fa-mouse-pointer"></i> 交互体验</h3>
                <p>点击屏幕任意位置触发新烟花</p>
            </div>
            <div class="feature">
                <h3><i class="fas fa-bolt"></i> 即时加载</h3>
                <p>点开链接立即开始烟花表演</p>
            </div>
        </div>
        
        <div class="controls">
            <button id="moreFireworks"><i class="fas fa-plus"></i> 更多烟花</button>
            <button id="resetFireworks"><i class="fas fa-sync-alt"></i> 重置场景</button>
        </div>
    </div>
    
    <footer>
        HTML5 Canvas 烟花效果 | 点击页面任意位置触发烟花
    </footer>

    <script>
        // 获取Canvas元素和上下文
        const canvas = document.getElementById('fireworks');
        const ctx = canvas.getContext('2d');
        
        // 设置Canvas大小为窗口大小
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        // 窗口大小调整时更新Canvas尺寸
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
        
        // 烟花粒子类
        class Particle {
            constructor(x, y, color, velocity, size = 2, decay = 0.015) {
                this.x = x;
                this.y = y;
                this.color = color;
                this.velocity = velocity;
                this.size = Math.random() * size + 1;
                this.alpha = 1;
                this.decay = decay;
                this.gravity = 0.05;
                this.resistance = 0.98;
            }
            
            draw() {
                ctx.save();
                ctx.globalAlpha = this.alpha;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();
                ctx.restore();
            }
            
            update() {
                this.velocity.x *= this.resistance;
                this.velocity.y *= this.resistance;
                this.velocity.y += this.gravity;
                this.x += this.velocity.x;
                this.y += this.velocity.y;
                this.alpha -= this.decay;
                this.size *= 0.99;
                this.draw();
                return this.alpha > 0;
            }
        }
        
        // 烟花类
        class Firework {
            constructor(x, y, targetX, targetY, color) {
                this.x = x;
                this.y = y;
                this.targetX = targetX;
                this.targetY = targetY;
                this.color = color;
                this.particles = [];
                this.velocity = { x: 0, y: 0 };
                this.speed = 5;
                this.angle = Math.atan2(targetY - y, targetX - x);
                this.velocity.x = Math.cos(this.angle) * this.speed;
                this.velocity.y = Math.sin(this.angle) * this.speed;
                this.size = 3;
                this.trail = [];
                this.trailLength = 10;
            }
            
            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();
                
                // 绘制拖尾
                ctx.beginPath();
                ctx.moveTo(this.trail[0].x, this.trail[0].y);
                for (let i = 1; i < this.trail.length; i++) {
                    ctx.lineTo(this.trail[i].x, this.trail[i].y);
                }
                ctx.strokeStyle = this.color;
                ctx.lineWidth = 2;
                ctx.stroke();
            }
            
            update() {
                this.x += this.velocity.x;
                this.y += this.velocity.y;
                
                // 保存轨迹点
                this.trail.push({ x: this.x, y: this.y });
                if (this.trail.length > this.trailLength) {
                    this.trail.shift();
                }
                
                this.draw();
                
                // 检查是否到达目标位置
                const distance = Math.hypot(this.targetX - this.x, this.targetY - this.y);
                if (distance < 5) {
                    this.explode();
                    return false;
                }
                return true;
            }
            
            explode() {
                const particleCount = 100;
                const power = 8;
                
                for (let i = 0; i < particleCount; i++) {
                    const angle = Math.random() * Math.PI * 2;
                    const velocity = {
                        x: Math.cos(angle) * Math.random() * power,
                        y: Math.sin(angle) * Math.random() * power
                    };
                    
                    // 创建爆炸粒子
                    particles.push(new Particle(
                        this.x, 
                        this.y, 
                        this.color, 
                        velocity,
                        3,
                        0.01
                    ));
                }
                
                // 添加二次爆炸效果
                setTimeout(() => {
                    for (let i = 0; i < 30; i++) {
                        const angle = Math.random() * Math.PI * 2;
                        const velocity = {
                            x: Math.cos(angle) * Math.random() * power * 0.5,
                            y: Math.sin(angle) * Math.random() * power * 0.5
                        };
                        
                        particles.push(new Particle(
                            this.x, 
                            this.y, 
                            `hsl(${Math.random() * 360}, 100%, 60%)`, 
                            velocity,
                            2,
                            0.02
                        ));
                    }
                }, 200);
            }
        }
        
        // 存储所有烟花和粒子
        let fireworks = [];
        let particles = [];
        
        // 创建随机烟花
        function createFirework() {
            const startX = Math.random() * canvas.width;
            const startY = canvas.height;
            const targetX = Math.random() * (canvas.width - 200) + 100;
            const targetY = Math.random() * (canvas.height / 3);
            const color = `hsl(${Math.random() * 360}, 100%, 60%)`;
            
            fireworks.push(new Firework(startX, startY, targetX, targetY, color));
        }
        
        // 创建多个烟花
        function createFireworks(count) {
            for (let i = 0; i < count; i++) {
                setTimeout(() => {
                    createFirework();
                }, i * 300);
            }
        }
        
        // 动画循环
        function animate() {
            // 创建半透明背景效果（实现拖尾和淡化效果）
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // 更新和绘制所有粒子
            particles = particles.filter(particle => particle.update());
            
            // 更新和绘制所有烟花
            fireworks = fireworks.filter(firework => firework.update());
            
            requestAnimationFrame(animate);
        }
        
        // 添加点击事件监听器
        canvas.addEventListener('click', (e) => {
            const mouseX = e.clientX;
            const mouseY = e.clientY;
            
            // 从底部发射烟花到点击位置
            const startX = Math.random() * canvas.width;
            const startY = canvas.height;
            const color = `hsl(${Math.random() * 360}, 100%, 60%)`;
            
            fireworks.push(new Firework(startX, startY, mouseX, mouseY, color));
        });
        
        // 按钮事件
        document.getElementById('moreFireworks').addEventListener('click', () => {
            createFireworks(5);
        });
        
        document.getElementById('resetFireworks').addEventListener('click', () => {
            fireworks = [];
            particles = [];
            createFireworks(8);
        });
        
        // 初始化
        createFireworks(8);
        animate();
        
        // 添加背景音乐
        const audio = new Audio();
        audio.src = "https://assets.mixkit.co/sfx/preview/mixkit-firework-explosion-3095.mp3";
        audio.volume = 0.3;
        
        // 随机播放烟花音效
        setInterval(() => {
            if (Math.random() > 0.7) {
                audio.currentTime = 0;
                audio.play().catch(e => console.log("Audio play prevented by browser policy"));
            }
        }, 1000);
    </script>
</body>
</html>